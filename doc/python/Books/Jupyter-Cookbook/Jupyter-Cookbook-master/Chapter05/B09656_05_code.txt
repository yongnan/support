###################################################################
# sample widget
import ipywidgets as widgets
from IPython.display import display

my_button = widgets.Button(description='Click My Button')

display(my_button)

def my_button_clicked(b):
    print("You clicked on My Button")

my_button.on_click(my_button_clicked)

###################################################################
# ipyleaflets
from ipyleaflet import *
m = Map(zoom=4, basemap=basemaps.Esri.WorldStreetMap)
m
m.zoom

###################################################################
# ipywidget radio button
import ipywidgets as widgets

widgets.RadioButtons(
 options=['red', 'green', 'blue'],
 description='Balloon color:',
 disabled=False
)
###################################################################
# ipywidget container

from ipywidgets import *
from IPython.display import display

slider = widgets.FloatSlider() 
message = widgets.Text(value='Hello World')

container = widgets.Box(children=[slider, message])
container.layout.border = '1px black solid'

display(container)

###################################################################
# ipywidget interactive checkbox

def mycheckfunction(x):
    print(x)
    return x

interactive_checkbox = interactive(mycheckfunction, x=False)
interactive_checkbox

###################################################################
# ipywidget interactive text box

def mytextfunction(x):
    print(x)
    return x

interactive_text = interactive(mytextfunction, x="Hello World")
interactive_text

###################################################################
# linked widgets

import ipywidgets as widgets

floatTextBox = widgets.FloatText()
floatSlider = widgets.FloatSlider()
display(floatTextBox,floatSlider)

widgetLink = widgets.jslink((floatTextBox, 'value'), (floatSlider, 'value'))

###################################################################
# link widget to plot

%matplotlib inline
from ipywidgets import interactive
import matplotlib.pyplot as plt
import numpy as np

def f(r):
 plt.axes()
 circle = plt.Circle((0, 0), radius=r, fc='y')
 plt.gca().add_patch(circle)
 plt.axis('scaled')
 plt.show()

interactive_plot = interactive(f, r=(0.0, 1.0))
output = interactive_plot.children[-1]
output.layout.height = '350px'
interactive_plot
###################################################################
# cookie cutter

from DanToomeyWidget import example
hello_world = example.HelloWorld()
hello_world

###################################################################
# simple orbit

import rebound
sim = rebound.Simulation()
sim.add(m=1)
sim.add(a=1)
fig = rebound.OrbitPlot(sim)
fig
###################################################################
# complex orbit

import rebound

# setup simulation
sim = rebound.Simulation()
sim.getWidget()

# add star
sim.add(m=1)

# add ten 'planets'
for i in range(10):
 sim.add(m=1e-3, a=0.4+0.1*i, inc=0.03*i, omega=5.*i)

# center all particles
sim.move_to_com()

# advance the simulation
sim.integrate(500)

# get 3 widgets
widget1 = sim.getWidget(orientation=(0,0,0,1), scale=2)
widget2 = sim.getWidget(orientation=(0,1,0,1), scale=2, size=(50,200))
widget3 = sim.getWidget(orientation=(1,0,0,1), scale=2, size=(200,50))

# paint the widgets in a VBox
from ipywidgets import HBox, VBox
VBox((widget3, HBox((widget1, widget2))))

# advance the clock again, to get the widgets to display
sim.integrate(500)

# get our final display on screen
fig = rebound.OrbitPlot(sim)
fig
###################################################################
###################################################################
